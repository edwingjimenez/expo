from flask import Flask, render_template, request, jsonify
from datetime import datetime
import google.generativeai as genai
import requests
import os
import re
from dotenv import load_dotenv
from googletrans import Translator
import OpenAI

# Cargar variables de entorno desde .env
load_dotenv()

app = Flask(__name__)
translator = Translator()

GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY') # Nueva variable para OpenAI

print(f"üîë GEMINI_API_KEY cargada: {bool(GEMINI_API_KEY)}")
print(f"üîë OPENAI_API_KEY cargada: {bool(OPENAI_API_KEY)}")

# Configuraci√≥n de Gemini
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel('gemini-1.5-flash')
        print("‚úÖ Gemini configurado correctamente")
    except Exception as e:
        print(f"‚ùå Error configurando Gemini: {e}")

# Configuraci√≥n de OpenAI (gpt-oss-120b)
if OPENAI_API_KEY:
    try:
        openai_client = OpenAI(
            base_url="https://api.pawan.krd/v1", # URL espec√≠fica para gpt-oss-120b (gratuita)
            api_key=OPENAI_API_KEY
        )
        print("‚úÖ OpenAI (gpt-oss-120b) configurado correctamente")
    except Exception as e:
        print(f"‚ùå Error configurando OpenAI: {e}")

responses = {
    "hola": "¬°Hola! ¬øEn qu√© puedo ayudarte?",
    "qu√© puedes hacer": "Puedo responder preguntas con la ayuda de IA avanzada",
    "qu√© hora es": f"Son las {datetime.now().strftime('%H:%M')}",
    "cu√©ntame un chiste": "¬øQu√© dice un sem√°foro a otro? ¬°No me mires, me estoy cambiando! üòÜ",
    "adi√≥s": "¬°Hasta luego! üíª",
    "default": "No entend√≠. ¬øPuedes reformular tu pregunta?"
}

# ‚úÖ FUNCI√ìN MEJORADA PARA TRADUCIR TEXTO
def traducir_a_espanol(texto):
    """Traduce texto al espa√±ol si est√° en ingl√©s - DETECCI√ìN MEJORADA"""
    try:
        if not texto or not isinstance(texto, str):
            return texto
        
        # Detecci√≥n m√°s agresiva de ingl√©s
        palabras_ingles = [
            'the', 'is', 'are', 'and', 'of', 'in', 'to', 'for', 'with', 'that', 'this',
            'you', 'your', 'it', 'its', 'he', 'she', 'they', 'them', 'their', 'our', 'we',
            'what', 'when', 'where', 'why', 'how', 'which', 'who', 'whom', 'whose',
            'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should',
            'can', 'may', 'might', 'must', 'shall', 'about', 'above', 'after', 'before',
            'between', 'into', 'through', 'during', 'including', 'until', 'upon', 'within'
        ]
        
        # Contar palabras en ingl√©s de manera m√°s precisa
        palabras_texto = re.findall(r'\b[a-z]+\b', texto.lower())
        total_palabras = len(palabras_texto)
        
        if total_palabras == 0:
            return texto
        
        count_ingles = sum(1 for palabra in palabras_texto if palabra in palabras_ingles)
        porcentaje_ingles = count_ingles / total_palabras
        
        print(f"üîç Detecci√≥n idioma: {count_ingles}/{total_palabras} palabras en ingl√©s ({porcentaje_ingles:.2%})")
        
        # Si m√°s del 10% son palabras en ingl√©s, traducir
        if porcentaje_ingles > 0.1:
            print("üåç Traduciendo de ingl√©s a espa√±ol...")
            traduccion = translator.translate(texto, dest='es')
            return traduccion.text
        
        return texto
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error en traducci√≥n: {e}")
        return texto

# ‚úÖ FUNCI√ìN PARA LIMPIAR TEXTO
def limpiar_texto(texto):
    """Elimina caracteres especiales y formato no deseado"""
    if not texto or not isinstance(texto, str):
        return texto
    
    # 1. Eliminar markdown y caracteres especiales
    texto = re.sub(r'[\*\#\_\`\~\-\=]', ' ', texto)  # Elimina * # _ ` ~ - =
    texto = re.sub(r'\[.*?\]\(.*?\)', '', texto)      # Elimina [enlaces](url)
    
    # 2. Eliminar frases t√≠picas de IAs
    frases_a_eliminar = [
        'as an ai', 'as a language model', 'i am an ai', 
        'please note that', 'keep in mind that', 'according to',
        'based on my knowledge', 'i should note', 'it\'s important to note',
        'here is', 'here are', 'for example', 'in summary',
        'in conclusion', 'additionally', 'furthermore', 'moreover'
    ]
    
    for frase in frases_a_eliminar:
        texto = re.sub(frase, '', texto, flags=re.IGNORECASE)
    
    # 3. Normalizar espacios y saltos de l√≠nea
    texto = re.sub(r'\s+', ' ', texto)  # Reemplazar m√∫ltiples espacios por uno
    texto = re.sub(r'\n\s*\n', '\n', texto)  # Reemplazar m√∫ltiples saltos de l√≠nea
    texto = texto.strip()
    
    # 4. Capitalizar primera letra
    if texto and texto[0].islower():
        texto = texto[0].upper() + texto[1:]
    
    # 5. Eliminar espacios alrededor de puntuaci√≥n
    texto = re.sub(r'\s+([.,!?;:])', r'\1', texto)
    texto = re.sub(r'([.,!?;:])\s+', r'\1 ', texto)
    
    return texto

def ask_gemini(user_message):
    """Consulta real a Gemini con traducci√≥n y limpieza"""
    if not GEMINI_API_KEY:
        return "Gemini API Key no configurada."
    try:
        response = gemini_model.generate_content(user_message)
        text = response.text if hasattr(response, "text") else str(response)
        
        # ‚úÖ Aplicar traducci√≥n y limpieza
        text = text.replace('[IA: gemini]', '').strip()
        text = traducir_a_espanol(text)
        text = limpiar_texto(text)
        
        return text
    except Exception as e:
        print(f"‚ùå Error consultando Gemini: {e}")
        return "Error consultando Gemini"

# ‚úÖ NUEVA FUNCI√ìN PARA CONSULTAR A OPENAI
def ask_openai(user_message):
    """Consulta real a OpenAI con traducci√≥n y limpieza"""
    if not OPENAI_API_KEY:
        return "OpenAI API Key no configurada."
    try:
        response = openai_client.chat.completions.create(
            model="gpt-oss-120b",
            messages=[{"role": "user", "content": user_message}]
        )
        text = response.choices[0].message.content
        
        # ‚úÖ Aplicar traducci√≥n y limpieza
        text = traducir_a_espanol(text)
        text = limpiar_texto(text)
        
        return text
    except Exception as e:
        print(f"‚ùå Error consultando OpenAI: {e}")
        return "Error consultando OpenAI"


@app.route('/')
def home():
    return render_template('index.html')

@app.route('/get_response', methods=['POST'])
def get_response():
    try:
        user_message = request.form['message'].lower()
        ai_selected = request.form.get('ai_type', 'auto')
        
        print(f"üì© Mensaje recibido: '{user_message}'")
        print(f"üéØ IA seleccionada: '{ai_selected}'")
        
        for key in responses:
            if key in user_message:
                print(f"‚úÖ Usando respuesta predefinida para: {key}")
                return jsonify({'response': responses[key]})
        
        bot_response = None
        
        if ai_selected == 'predefinido':
            print("üîß Modo predefinido seleccionado")
            bot_response = responses['default']
        
        elif ai_selected == 'gemini':
            print("üîß Solicitando Gemini...")
            bot_response = ask_gemini(user_message)
        
        elif ai_selected == 'openai': # Cambiado de 'deepseek' a 'openai'
            print("üîß Solicitando OpenAI (gpt-oss-120b)...")
            bot_response = ask_openai(user_message)
        
        else:  # Modo autom√°tico
            print("üîß Modo autom√°tico... usando Gemini")
            bot_response = ask_gemini(user_message)
        
        print(f"üì§ Enviando respuesta: {bot_response}")
        return jsonify({'response': bot_response})
        
    except Exception as e:
        print(f"üí• Error grave: {e}")
        return jsonify({'response': "Error interno del servidor"})

if __name__ == '__main__':
    app.run(debug=True, port=5000)